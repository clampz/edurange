#!/usr/bin/env bash

echo "starting - CLOUD INIT"

# Install stuff for chef solo
<% if instance.os == 'ubuntu' %>
apt-get -y update
#apt-get -y upgrade TODO reenable apt-get upgrade. We don't want security problems
#apt-get -y install build-essential
#apt-get -y install ruby1.9.1 ruby1.9.1-dev
#apt-get -y autoremove
#apt-get -y clean
 
#gem install chef ruby-shadow --no-ri --no-rdoc --verbose

hostname <%= instance.uuid %>

<% elsif instance.os == 'nat' %>
export PATH=$PATH:/usr/local/bin
yum groupinstall -y "Development tools"
yum install -y libxml2-devel libxslt-devel
yum install -y git

yum install -y ruby19 ruby19-devel rubygems19 rubygem19-rdoc rubygem19-rake rubygem19-bigdecimal
ln -sf /usr/bin/ruby1.9 /usr/bin/ruby
ln -sf /usr/bin/gem1.9 /usr/bin/gem
ln -sf /usr/bin/irb1.9 /usr/bin/irb
ln -sf /usr/bin/rdoc1.9 /usr/bin/rdoc
ln -sf /usr/bin/rake1.9 /usr/bin/rake
gem update --system --no-document

gem install chef ruby-shadow --no-ri --no-rdoc --verbose

wget -O- https://opscode.com/chef/install.sh | sudo bash
<% else %>
# <%= instance.os %>
<% end %>
# Put chef stuff in place
mkdir -p /root/chef/cookbooks/op/recipes
cd /root/chef

# /root/chef/solo.rb
cat << EOF > solo.rb
root = File.absolute_path(File.dirname(__FILE__))

file_cache_path root
cookbook_path root + '/cookbooks'
EOF

# /root/chef/solo.json
cat << EOF > solo.json
{
  "run_list": [ "recipe[op::default]" ]
}
EOF

# /root/chef/cron.sh - Every 2 minutes get script on internet, place cookbooks/op/recipes/default.rb, run chef-solo
cat << EOF > cron.sh
#!/usr/bin/env bash
cd /root/chef/cookbooks/op/recipes/
wget -O default.rb '<%= cookbook_url %>'
cd /root/chef
#/usr/local/bin/chef-solo -c solo.rb -j solo.json
chef-solo -c solo.rb -j solo.json
EOF

# Crontab entry - Run cron.sh every 2 minutes
crontab -l | { cat; echo "*/2 * * * * /bin/bash /root/chef/cron.sh"; } | crontab -
chmod +x /root/chef/cron.sh
/root/chef/cron.sh # Install stuff initially, don't wait 10 min

echo "finished - CLOUD INIT"